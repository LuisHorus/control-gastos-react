import {
  __commonJS,
  __toESM,
  require_react
} from "./chunk-S2TLTWWO.js";

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/react-swipeable-list/dist/react-swipeable-list.esm.js
var import_react = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var LeadingActions = function LeadingActions2(_ref) {
  var children = _ref.children;
  if (children === null || children === void 0) {
    return null;
  }
  if (Array.isArray(children)) {
    return import_react.default.Children.map(children, function(child, index) {
      if (!import_react.default.isValidElement(child)) {
        return child;
      }
      return import_react.default.cloneElement(child, {
        leading: true,
        main: index === 0
      });
    });
  }
  return import_react.default.cloneElement(children, {
    leading: true,
    main: true
  });
};
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  Object.defineProperty(subClass, "prototype", {
    value: Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    }),
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function toVal(mix) {
  var k, y, str = "";
  if (typeof mix === "string" || typeof mix === "number") {
    str += mix;
  } else if (typeof mix === "object") {
    if (Array.isArray(mix)) {
      for (k = 0; k < mix.length; k++) {
        if (mix[k]) {
          if (y = toVal(mix[k])) {
            str && (str += " ");
            str += y;
          }
        }
      }
    } else {
      for (k in mix) {
        if (mix[k]) {
          str && (str += " ");
          str += k;
        }
      }
    }
  }
  return str;
}
function clsx() {
  var i = 0, tmp, x, str = "";
  while (i < arguments.length) {
    if (tmp = arguments[i++]) {
      if (x = toVal(tmp)) {
        str && (str += " ");
        str += x;
      }
    }
  }
  return str;
}
var Type = {
  ANDROID: Symbol("ANDROID"),
  IOS: Symbol("IOS"),
  MS: Symbol("MS")
};
var SwipeableList = function(_PureComponent) {
  _inherits(SwipeableList2, _PureComponent);
  var _super = _createSuper(SwipeableList2);
  function SwipeableList2(props) {
    var _this;
    _classCallCheck(this, SwipeableList2);
    _this = _super.call(this, props);
    _this.itemsMap = {};
    _this.clickedItem = _this.clickedItem.bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(SwipeableList2, [{
    key: "clickedItem",
    value: function clickedItem(itemId) {
      var _this2 = this;
      Object.keys(this.itemsMap).forEach(function(listItem) {
        if (listItem !== itemId) {
          _this2.itemsMap[listItem]();
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;
      var _this$props = this.props, _this$props$actionDel = _this$props.actionDelay, actionDelay = _this$props$actionDel === void 0 ? 0 : _this$props$actionDel, children = _this$props.children, _this$props$className = _this$props.className, className = _this$props$className === void 0 ? "" : _this$props$className, _this$props$fullSwipe = _this$props.fullSwipe, fullSwipe = _this$props$fullSwipe === void 0 ? false : _this$props$fullSwipe, _this$props$destructi = _this$props.destructiveCallbackDelay, destructiveCallbackDelay = _this$props$destructi === void 0 ? 1e3 : _this$props$destructi, style = _this$props.style, _this$props$type = _this$props.type, type = _this$props$type === void 0 ? Type.ANDROID : _this$props$type, _this$props$Tag = _this$props.Tag, Tag = _this$props$Tag === void 0 ? "div" : _this$props$Tag, scrollStartThreshold = _this$props.scrollStartThreshold, swipeStartThreshold = _this$props.swipeStartThreshold, _this$props$threshold = _this$props.threshold, threshold = _this$props$threshold === void 0 ? 0.5 : _this$props$threshold;
      return import_react.default.createElement(Tag, {
        className: clsx("swipeable-list", className),
        style
      }, import_react.default.Children.map(children, function(child, index) {
        return import_react.default.cloneElement(child, {
          actionDelay,
          destructiveCallbackDelay,
          fullSwipe,
          listType: type,
          scrollStartThreshold,
          swipeStartThreshold,
          threshold,
          clickedCallback: _this3.clickedItem,
          id: "listItem-".concat(index),
          resetState: function resetState(func) {
            _this3.itemsMap["listItem-".concat(index)] = func;
          }
        });
      }));
    }
  }]);
  return SwipeableList2;
}(import_react.PureComponent);
SwipeableList.propTypes = {
  actionDelay: import_prop_types.default.number,
  children: import_prop_types.default.node,
  className: import_prop_types.default.string,
  fullSwipe: import_prop_types.default.bool,
  destructiveCallbackDelay: import_prop_types.default.number,
  style: import_prop_types.default.object,
  type: import_prop_types.default.oneOf(Object.values(Type)),
  Tag: import_prop_types.default.string,
  scrollStartThreshold: import_prop_types.default.number,
  swipeStartThreshold: import_prop_types.default.number,
  threshold: import_prop_types.default.number
};
var ItemContext = import_react.default.createContext();
var ActionAnimation = {
  RETURN: Symbol("Return"),
  REMOVE: Symbol("Remove"),
  NONE: Symbol("None")
};
var DragDirection = {
  UP: "up",
  DOWN: "down",
  LEFT: "left",
  RIGHT: "right",
  UNKNOWN: "unknown"
};
var FPS_INTERVAL = 1e3 / 60;
var measure = function measure2(element, fn) {
  var prevWidth = element.style.width;
  var prevVisibility = element.style.visibility;
  element.style.width = "auto";
  element.style.visibility = "hidden";
  var result = fn(element);
  element.style.width = prevWidth;
  element.style.visibility = prevVisibility;
  return result;
};
var initialState = {
  leadingFullSwipe: false,
  trailingFullSwipe: false,
  triggerAction: false,
  scaleLeading: false,
  scaleTrailing: false
};
var SwipeableListItem = function(_PureComponent) {
  _inherits(SwipeableListItem2, _PureComponent);
  var _super = _createSuper(SwipeableListItem2);
  function SwipeableListItem2(props) {
    var _this;
    _classCallCheck(this, SwipeableListItem2);
    _this = _super.call(this, props);
    _defineProperty(_assertThisInitialized(_this), "setLeadingFullSwipeAction", function(action) {
      _this.leadingFullSwipeAction = action;
    });
    _defineProperty(_assertThisInitialized(_this), "setTrailingFullSwipeAction", function(action) {
      _this.trailingFullSwipeAction = action;
    });
    _defineProperty(_assertThisInitialized(_this), "resetState", function() {
      _this.dragStartPoint = {
        x: -1,
        y: -1
      };
      _this.dragDirection = DragDirection.UNKNOWN;
      _this.left = 0;
      _this.previousSwipeDistancePercent = 0;
      _this.leadingActionsOpened = false;
      _this.trailingActionsOpened = false;
    });
    _defineProperty(_assertThisInitialized(_this), "handleDragStartMouse", function(event) {
      window.addEventListener("mouseup", _this.handleDragEndMouse);
      window.addEventListener("mousemove", _this.handleMouseMove);
      _this.listElement.addEventListener("mouseup", _this.handleDragEndMouse);
      _this.listElement.addEventListener("mousemove", _this.handleMouseMove);
      _this.handleDragStart(event);
    });
    _defineProperty(_assertThisInitialized(_this), "handleDragStartTouch", function(event) {
      window.addEventListener("touchend", _this.handleDragEndTouch);
      var touch = event.targetTouches[0];
      _this.handleDragStart(touch);
    });
    _defineProperty(_assertThisInitialized(_this), "handleDragStart", function(_ref) {
      var clientX = _ref.clientX, clientY = _ref.clientY;
      if (_this.props.clickedCallback) {
        _this.props.clickedCallback(_this.id);
      }
      if (!_this.leadingActionsOpened && !_this.trailingActionsOpened) {
        _this.resetState();
        _this.setState(initialState);
      }
      var startOffsetX = 0;
      if (_this.leadingActionsOpened) {
        startOffsetX = -_this.leadingActionsWidth;
      }
      if (_this.trailingActionsOpened) {
        startOffsetX = _this.trailingActionsWidth;
      }
      _this.dragStartPoint = {
        x: clientX + startOffsetX,
        y: clientY
      };
      _this.listElement.className = "swipeable-list-item__content";
      if (_this.leadingActionsElement) {
        _this.leadingActionsElement.className = "swipeable-list-item__leading-actions";
      }
      if (_this.trailingActionsElement) {
        _this.trailingActionsElement.className = "swipeable-list-item__trailing-actions";
      }
      _this.startTime = Date.now();
      _this.scheduleUpdatePosition();
    });
    _defineProperty(_assertThisInitialized(_this), "handleMouseMove", function(event) {
      if (_this.dragStartedWithinItem()) {
        var clientX = event.clientX, clientY = event.clientY;
        _this.setDragDirection(clientX, clientY);
        if (_this.isSwiping()) {
          event.stopPropagation();
          event.preventDefault();
          var newLeft = clientX - _this.dragStartPoint.x;
          if (newLeft > 0) {
            _this.left = Math.min(newLeft, _this.maxSwipeThreshold);
          } else {
            _this.left = Math.max(newLeft, -_this.maxSwipeThreshold);
          }
          _this.scheduleUpdatePosition();
        }
      }
    });
    _defineProperty(_assertThisInitialized(_this), "handleTouchMove", function(event) {
      if (_this.dragStartedWithinItem()) {
        var _event$targetTouches$ = event.targetTouches[0], clientX = _event$targetTouches$.clientX, clientY = _event$targetTouches$.clientY;
        _this.setDragDirection(clientX, clientY);
        if (!event.cancelable) {
          return;
        }
        if (_this.isSwiping()) {
          event.stopPropagation();
          event.preventDefault();
          var newLeft = clientX - _this.dragStartPoint.x;
          if (newLeft > 0) {
            _this.left = Math.min(newLeft, _this.maxSwipeThreshold);
          } else {
            _this.left = Math.max(newLeft, -_this.maxSwipeThreshold);
          }
          _this.scheduleUpdatePosition();
        }
      }
    });
    _defineProperty(_assertThisInitialized(_this), "handleDragEndMouse", function() {
      window.removeEventListener("mouseup", _this.handleDragEndMouse);
      window.removeEventListener("mousemove", _this.handleMouseMove);
      if (_this.listElement) {
        _this.listElement.removeEventListener("mouseup", _this.handleDragEndMouse);
        _this.listElement.removeEventListener("mousemove", _this.handleMouseMove);
      }
      _this.handleDragEnd();
    });
    _defineProperty(_assertThisInitialized(_this), "handleDragEndTouch", function() {
      window.removeEventListener("touchend", _this.handleDragEndTouch);
      _this.handleDragEnd();
    });
    _defineProperty(_assertThisInitialized(_this), "playReturnAnimationForLeadingActions", function(_ref2) {
      var to = _ref2.to, isIosType = _ref2.isIosType, playMsReturnAnimation = _ref2.playMsReturnAnimation;
      if (_this.leadingActionsElement) {
        _this.leadingActionsElement.className = clsx("swipeable-list-item__leading-actions", playMsReturnAnimation ? "swipeable-list-item__actions--return-ms" : "swipeable-list-item__leading-actions--return");
        if (_this.leadingActionsOpened && isIosType && to !== 0) {
          _this.leadingActionsElement.className += " test-actions-opened";
        }
        if (playMsReturnAnimation) {
          var keepAnimationEnd = function keepAnimationEnd2() {
            _this.leadingActionsElement.removeEventListener("animationend", keepAnimationEnd2);
            _this.leadingActionsElement.style.width = 0;
          };
          _this.leadingActionsElement.addEventListener("animationend", keepAnimationEnd);
        } else {
          _this.leadingActionsElement.style.width = "".concat(to === 0 || !isIosType ? 0 : _this.leadingActionsOpened && isIosType ? _this.leadingActionsWidth : 0, "px");
        }
      }
    });
    _defineProperty(_assertThisInitialized(_this), "playReturnAnimationForTrailingActions", function(_ref3) {
      var to = _ref3.to, isIosType = _ref3.isIosType, playMsReturnAnimation = _ref3.playMsReturnAnimation;
      if (_this.trailingActionsElement) {
        _this.trailingActionsElement.className = clsx("swipeable-list-item__trailing-actions", playMsReturnAnimation ? "swipeable-list-item__actions--return-ms" : "swipeable-list-item__trailing-actions--return");
        if (_this.trailingActionsOpened && isIosType && to !== 0) {
          _this.trailingActionsElement.className += " test-actions-opened";
        }
        if (!playMsReturnAnimation) {
          _this.trailingActionsElement.style.width = "".concat(to === 0 || !isIosType ? 0 : _this.trailingActionsOpened && isIosType ? _this.trailingActionsWidth : 0, "px");
        } else {
          var keepAnimationEnd = function keepAnimationEnd2() {
            _this.trailingActionsElement.removeEventListener("animationend", keepAnimationEnd2);
            _this.trailingActionsElement.style.width = 0;
          };
          _this.trailingActionsElement.addEventListener("animationend", keepAnimationEnd);
        }
      }
    });
    _defineProperty(_assertThisInitialized(_this), "playReturnAnimation", function() {
      var _ref4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref4$to = _ref4.to, to = _ref4$to === void 0 ? 0 : _ref4$to;
      if (_this.left === 0) {
        return;
      }
      var _assertThisInitialize = _assertThisInitialized(_this), listElement = _assertThisInitialize.listElement;
      var listType = _this.props.listType;
      var triggerAction = _this.state.triggerAction;
      var isIosType = listType === Type.IOS;
      var isMsType = listType === Type.MS;
      var playMsReturnAnimation = triggerAction && isMsType;
      if (playMsReturnAnimation) {
        var keepAnimationEnd = function keepAnimationEnd2() {
          listElement.removeEventListener("animationend", keepAnimationEnd2);
          listElement.style.transform = "translateX(0)";
        };
        listElement.addEventListener("animationend", keepAnimationEnd);
      }
      if (listElement) {
        listElement.className = clsx("swipeable-list-item__content", playMsReturnAnimation ? "swipeable-list-item__content--return-".concat(_this.left < 0 ? "trailing" : "leading", "-ms") : "swipeable-list-item__content--return");
        if (!playMsReturnAnimation) {
          listElement.style.transform = "translateX(".concat(isIosType ? to : 0, "px)");
        }
      }
      if (_this.left < 0) {
        _this.playReturnAnimationForTrailingActions({
          to,
          isIosType,
          playMsReturnAnimation
        });
      } else {
        _this.playReturnAnimationForLeadingActions({
          to,
          isIosType,
          playMsReturnAnimation
        });
      }
      if (to === 0) {
        _this.leadingActionsOpened = false;
        _this.trailingActionsOpened = false;
        _this.resetState();
      }
    });
    _defineProperty(_assertThisInitialized(_this), "playRemoveAnimation", function() {
      var _assertThisInitialize2 = _assertThisInitialized(_this), listElement = _assertThisInitialize2.listElement, wrapperElement = _assertThisInitialize2.wrapperElement;
      var listType = _this.props.listType;
      if (listElement) {
        wrapperElement.className = "swipeable-list-item swipeable-list-item--remove";
        listElement.className = "swipeable-list-item__content swipeable-list-item__content--remove";
        var isIosType = listType === Type.IOS;
        var leadingFullSwipe = isIosType ? _this.leadingActionsOpened : _this.dragDirection === DragDirection.RIGHT;
        var trailingFullSwipe = isIosType ? _this.trailingActionsOpened : _this.dragDirection === DragDirection.LEFT;
        var translateLength = listElement.offsetWidth * (leadingFullSwipe ? 1 : -1);
        listElement.style.transform = "translateX(".concat(translateLength, "px)");
        _this.setState({
          leadingFullSwipe,
          trailingFullSwipe
        });
        if (leadingFullSwipe) {
          _this.leadingActionsElement.className += " swipeable-list-item__leading-actions--return";
          _this.leadingActionsElement.style.width = "".concat(Math.abs(translateLength), "px");
        } else if (trailingFullSwipe) {
          _this.trailingActionsElement.className += " swipeable-list-item__trailing-actions--return";
          _this.trailingActionsElement.style.width = "".concat(Math.abs(translateLength), "px");
        }
      }
    });
    _defineProperty(_assertThisInitialized(_this), "playActionAnimation", function(_ref5) {
      var type = _ref5.type;
      var _assertThisInitialize3 = _assertThisInitialized(_this), listElement = _assertThisInitialize3.listElement;
      if (listElement) {
        switch (type) {
          case ActionAnimation.REMOVE:
            _this.playRemoveAnimation();
            break;
          case ActionAnimation.NONE:
            break;
          default:
            _this.playReturnAnimation();
        }
      }
    });
    _defineProperty(_assertThisInitialized(_this), "handleDragEnd", function() {
      if (_this.requestedAnimationFrame) {
        cancelAnimationFrame(_this.requestedAnimationFrame);
        _this.requestedAnimationFrame = null;
      }
      if (_this.isSwiping()) {
        var _this$state = _this.state, leadingFullSwipe = _this$state.leadingFullSwipe, trailingFullSwipe = _this$state.trailingFullSwipe, triggerAction = _this$state.triggerAction;
        var onSwipeEnd = _this.props.onSwipeEnd;
        if (onSwipeEnd) {
          onSwipeEnd(_this.dragDirection);
        }
        if (triggerAction) {
          if (leadingFullSwipe) {
            _this.leadingFullSwipeAction();
            return;
          }
          if (trailingFullSwipe) {
            _this.trailingFullSwipeAction();
            return;
          }
        }
        if (_this.leadingActionsOpened || _this.trailingActionsOpened) {
          if (_this.leadingActionsOpened) {
            _this.left = _this.leadingActionsWidth;
          } else if (_this.trailingActionsOpened) {
            _this.left = -_this.trailingActionsWidth;
          }
          _this.playReturnAnimation({
            to: _this.left
          });
        } else {
          _this.playReturnAnimation();
          _this.resetState();
        }
      }
    });
    _defineProperty(_assertThisInitialized(_this), "dragStartedWithinItem", function() {
      var _this$dragStartPoint = _this.dragStartPoint, x = _this$dragStartPoint.x, y = _this$dragStartPoint.y;
      return x !== -1 && y !== -1;
    });
    _defineProperty(_assertThisInitialized(_this), "setDragDirection", function(x, y) {
      if (_this.dragDirection === DragDirection.UNKNOWN) {
        var _this$dragStartPoint2 = _this.dragStartPoint, startX = _this$dragStartPoint2.x, startY = _this$dragStartPoint2.y;
        var horizontalDistance = Math.abs(x - startX);
        var verticalDistance = Math.abs(y - startY);
        if (horizontalDistance <= _this.dragHorizontalDirectionThreshold && verticalDistance <= _this.dragVerticalDirectionThreshold) {
          return;
        }
        var angle = Math.atan2(y - startY, x - startX);
        var octant = Math.round(8 * angle / (2 * Math.PI) + 8) % 8;
        switch (octant) {
          case 0:
            if (_this.leadingActionsElement !== null && horizontalDistance > _this.dragHorizontalDirectionThreshold) {
              _this.dragDirection = DragDirection.RIGHT;
            }
            break;
          case 1:
          case 2:
          case 3:
            if (verticalDistance > _this.dragVerticalDirectionThreshold) {
              _this.dragDirection = DragDirection.DOWN;
            }
            break;
          case 4:
            if (_this.trailingActionsElement !== null && horizontalDistance > _this.dragHorizontalDirectionThreshold) {
              _this.dragDirection = DragDirection.LEFT;
            }
            break;
          case 5:
          case 6:
          case 7:
            if (verticalDistance > _this.dragVerticalDirectionThreshold) {
              _this.dragDirection = DragDirection.UP;
            }
            break;
          default:
            _this.dragDirection = DragDirection.UNKNOWN;
        }
        var onSwipeStart = _this.props.onSwipeStart;
        if (onSwipeStart && _this.isSwiping()) {
          onSwipeStart(_this.dragDirection);
        }
      }
    });
    _defineProperty(_assertThisInitialized(_this), "isSwiping", function() {
      var blockSwipe = _this.props.blockSwipe;
      var horizontalDrag = _this.dragDirection === DragDirection.LEFT || _this.dragDirection === DragDirection.RIGHT;
      return !blockSwipe && _this.dragStartedWithinItem() && horizontalDrag;
    });
    _defineProperty(_assertThisInitialized(_this), "scheduleUpdatePosition", function() {
      if (_this.requestedAnimationFrame) {
        return;
      }
      _this.requestedAnimationFrame = requestAnimationFrame(function() {
        _this.requestedAnimationFrame = null;
        _this.updatePosition();
      });
    });
    _defineProperty(_assertThisInitialized(_this), "updatePosition", function() {
      if (!_this.isSwiping()) {
        return;
      }
      var elapsed = Date.now() - _this.startTime;
      if (elapsed <= FPS_INTERVAL) {
        return;
      }
      var _this$props = _this.props, fullSwipeThreshold = _this$props.threshold, listType = _this$props.listType;
      var fullSwipe = _this.fullSwipe;
      var isSwipingLeft = _this.left < 0;
      var isSwipingRight = _this.left > 0;
      if (isSwipingLeft) {
        if (_this.onlyLeadingActions) {
          _this.left = 0;
        }
        if (_this.trailingActionsElement && listType === Type.IOS) {
          _this.trailingActionsOpened = Math.abs(_this.left) > _this.trailingActionsWidth;
          _this.leadingActionsOpened = false;
        }
      }
      if (isSwipingRight) {
        if (_this.onlyTrailingActions) {
          _this.left = 0;
        }
        if (_this.leadingActionsElement && listType === Type.IOS) {
          _this.leadingActionsOpened = _this.left > _this.leadingActionsWidth;
          _this.trailingActionsOpened = false;
        }
      }
      if (_this.leadingActionsElement) {
        _this.leadingActionsElement.style.width = "".concat(_this.left < 0 ? 0 : _this.left, "px");
      }
      if (_this.trailingActionsElement) {
        _this.trailingActionsElement.style.width = "".concat(_this.left > 0 ? 0 : -_this.left, "px");
      }
      if (_this.listElement) {
        if (fullSwipe) {
          var _assertThisInitialize4 = _assertThisInitialized(_this), offsetWidth = _assertThisInitialize4.listElement.offsetWidth;
          var threshold = offsetWidth * fullSwipeThreshold;
          if (_this.left < -threshold) {
            _this.setState({
              leadingFullSwipe: false,
              trailingFullSwipe: true,
              triggerAction: true,
              scaleTrailing: true
            });
          } else if (_this.left > threshold) {
            _this.setState({
              leadingFullSwipe: true,
              trailingFullSwipe: false,
              triggerAction: true,
              scaleLeading: true
            });
          } else {
            _this.setState({
              scaleLeading: false,
              scaleTrailing: false,
              triggerAction: false
            });
          }
        }
        _this.listElement.style.transform = "translateX(".concat(_this.left, "px)");
        if (_this.props.onSwipeProgress) {
          var listElementWidth = _this.listElement.offsetWidth;
          var swipeDistancePercent = _this.previousSwipeDistancePercent;
          if (listElementWidth !== 0) {
            var swipeDistance = Math.max(0, listElementWidth - Math.abs(_this.left));
            swipeDistancePercent = 100 - Math.round(100 * swipeDistance / listElementWidth);
          }
          if (_this.previousSwipeDistancePercent !== swipeDistancePercent) {
            _this.props.onSwipeProgress(swipeDistancePercent, _this.dragDirection);
            _this.previousSwipeDistancePercent = swipeDistancePercent;
          }
        }
      }
      _this.startTime = Date.now();
    });
    _defineProperty(_assertThisInitialized(_this), "onActionTriggered", function(isDestructive) {
      _this.playActionAnimation({
        type: isDestructive ? ActionAnimation.REMOVE : ActionAnimation.RETURN
      });
    });
    _defineProperty(_assertThisInitialized(_this), "bindListElement", function(ref) {
      return _this.listElement = ref;
    });
    _defineProperty(_assertThisInitialized(_this), "bindWrapperElement", function(ref) {
      return _this.wrapperElement = ref;
    });
    _defineProperty(_assertThisInitialized(_this), "bindLeadingActionsElement", function(ref) {
      return _this.leadingActionsElement = ref;
    });
    _defineProperty(_assertThisInitialized(_this), "bindTrailingActionsElement", function(ref) {
      return _this.trailingActionsElement = ref;
    });
    _defineProperty(_assertThisInitialized(_this), "renderActions", function(actions, type, binder) {
      var _this$props2 = _this.props, actionDelay = _this$props2.actionDelay, destructiveCallbackDelay = _this$props2.destructiveCallbackDelay, listType = _this$props2.listType;
      var _this$state2 = _this.state, leadingFullSwipe = _this$state2.leadingFullSwipe, trailingFullSwipe = _this$state2.trailingFullSwipe, scaleLeading = _this$state2.scaleLeading, scaleTrailing = _this$state2.scaleTrailing;
      var _assertThisInitialize5 = _assertThisInitialized(_this), onActionTriggered = _assertThisInitialize5.onActionTriggered, setLeadingFullSwipeAction = _assertThisInitialize5.setLeadingFullSwipeAction, setTrailingFullSwipeAction = _assertThisInitialize5.setTrailingFullSwipeAction;
      var scaled = listType === Type.MS && (scaleLeading && type === "leading" || scaleTrailing && type === "trailing");
      return import_react.default.createElement("div", {
        className: clsx("swipeable-list-item__".concat(type, "-actions"), _defineProperty({}, "swipeable-list-item__".concat(type, "-actions--scaled"), scaled)),
        "data-testid": "".concat(type, "-actions"),
        ref: binder
      }, import_react.default.createElement(ItemContext.Provider, {
        value: {
          actionDelay,
          destructiveCallbackDelay,
          listType,
          leadingFullSwipe,
          onActionTriggered,
          scaleLeading,
          scaleTrailing,
          setLeadingFullSwipeAction,
          setTrailingFullSwipeAction,
          trailingFullSwipe
        }
      }, actions));
    });
    _defineProperty(_assertThisInitialized(_this), "handleClick", function(event) {
      if (_this.props.onClick) {
        if (_this.leadingActionsOpened || _this.trailingActionsOpened || _this.isSwiping()) {
          event.preventDefault();
          return;
        }
        var delta = Math.abs(event.clientX - _this.dragStartPoint.x);
        if (delta > 10) {
          event.preventDefault();
          return;
        }
        _this.props.onClick();
      }
    });
    _this.state = initialState;
    _this.listElement = null;
    _this.leadingActionsElement = null;
    _this.trailingActionsElement = null;
    _this.wrapperElement = null;
    _this.requestedAnimationFrame = null;
    _this.leadingActionsWidth = 0;
    _this.trailingActionsWidth = 0;
    _this.startTime = null;
    _this.previousSwipeDistancePercent = 0;
    _this.leadingFullSwipeAction = null;
    _this.trailingFullSwipeAction = null;
    _this.id = props.id;
    _this.resetState();
    return _this;
  }
  _createClass(SwipeableListItem2, [{
    key: "dragHorizontalDirectionThreshold",
    get: function get() {
      return this.props.swipeStartThreshold || 10;
    }
  }, {
    key: "dragVerticalDirectionThreshold",
    get: function get() {
      return this.props.scrollStartThreshold || 10;
    }
  }, {
    key: "fullSwipe",
    get: function get() {
      var _this$props3 = this.props, fullSwipe = _this$props3.fullSwipe, listType = _this$props3.listType;
      if (listType === Type.IOS) {
        return fullSwipe;
      }
      return true;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.listElement.addEventListener("mousedown", this.handleDragStartMouse);
      this.listElement.addEventListener("touchstart", this.handleDragStartTouch, {
        passive: true
      });
      this.listElement.addEventListener("touchend", this.handleDragEndTouch);
      this.listElement.addEventListener("touchmove", this.handleTouchMove, {
        capture: true,
        passive: false
      });
      if (this.leadingActionsElement) {
        this.leadingActionsWidth = measure(this.leadingActionsElement, function(el) {
          return el.offsetWidth;
        });
      }
      if (this.trailingActionsElement) {
        this.trailingActionsWidth = measure(this.trailingActionsElement, function(el) {
          return el.offsetWidth;
        });
      }
      if (this.props.resetState) {
        this.props.resetState(this.playReturnAnimation);
      }
      if (this.props.maxSwipe) {
        this.maxSwipeThreshold = this.props.maxSwipe * this.listElement.offsetWidth;
      } else {
        this.maxSwipeThreshold = this.listElement.offsetWidth;
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.requestedAnimationFrame) {
        cancelAnimationFrame(this.requestedAnimationFrame);
        this.requestedAnimationFrame = null;
      }
      this.listElement.removeEventListener("mousedown", this.handleDragStartMouse);
      this.listElement.removeEventListener("touchstart", this.handleDragStartTouch);
      this.listElement.removeEventListener("touchend", this.handleDragEndTouch);
      this.listElement.removeEventListener("touchmove", this.handleTouchMove, {
        capture: true,
        passive: false
      });
    }
  }, {
    key: "onlyLeadingActions",
    get: function get() {
      return this.leadingActionsElement !== null && this.trailingActionsElement === null;
    }
  }, {
    key: "onlyTrailingActions",
    get: function get() {
      return this.leadingActionsElement === null && this.trailingActionsElement !== null;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props, children = _this$props4.children, className = _this$props4.className, leadingActions = _this$props4.leadingActions, trailingActions = _this$props4.trailingActions;
      return import_react.default.createElement("div", {
        className: clsx("swipeable-list-item", className),
        id: this.id,
        ref: this.bindWrapperElement,
        onClick: this.handleClick
      }, leadingActions && this.renderActions(leadingActions, "leading", this.bindLeadingActionsElement), import_react.default.createElement("div", {
        className: "swipeable-list-item__content",
        "data-testid": "content",
        ref: this.bindListElement
      }, children), trailingActions && this.renderActions(trailingActions, "trailing", this.bindTrailingActionsElement));
    }
  }]);
  return SwipeableListItem2;
}(import_react.PureComponent);
SwipeableListItem.propTypes = {
  actionDelay: import_prop_types.default.number,
  blockSwipe: import_prop_types.default.bool,
  children: import_prop_types.default.node,
  className: import_prop_types.default.string,
  destructiveCallbackDelay: import_prop_types.default.number,
  fullSwipe: import_prop_types.default.bool,
  leadingActions: import_prop_types.default.node,
  listType: import_prop_types.default.oneOf(Object.values(Type)),
  maxSwipe: import_prop_types.default.number,
  onClick: import_prop_types.default.func,
  onSwipeEnd: import_prop_types.default.func,
  onSwipeProgress: import_prop_types.default.func,
  onSwipeStart: import_prop_types.default.func,
  scrollStartThreshold: import_prop_types.default.number,
  swipeStartThreshold: import_prop_types.default.number,
  threshold: import_prop_types.default.number,
  trailingActions: import_prop_types.default.node,
  clickedCallback: import_prop_types.default.func,
  id: import_prop_types.default.string,
  resetState: import_prop_types.default.func
};
var SwipeAction = function SwipeAction2(_ref) {
  var children = _ref.children, className = _ref.className, _ref$destructive = _ref.destructive, destructive = _ref$destructive === void 0 ? false : _ref$destructive, _ref$main = _ref.main, main = _ref$main === void 0 ? false : _ref$main, leading = _ref.leading, onClick = _ref.onClick, trailing = _ref.trailing, _ref$Tag = _ref.Tag, Tag = _ref$Tag === void 0 ? "span" : _ref$Tag;
  var _React$useContext = import_react.default.useContext(ItemContext), actionDelay = _React$useContext.actionDelay, destructiveCallbackDelay = _React$useContext.destructiveCallbackDelay, leadingFullSwipe = _React$useContext.leadingFullSwipe, listType = _React$useContext.listType, onActionTriggered = _React$useContext.onActionTriggered, setLeadingFullSwipeAction = _React$useContext.setLeadingFullSwipeAction, setTrailingFullSwipeAction = _React$useContext.setTrailingFullSwipeAction, trailingFullSwipe = _React$useContext.trailingFullSwipe, scaleLeading = _React$useContext.scaleLeading, scaleTrailing = _React$useContext.scaleTrailing;
  var onHandleClick = import_react.default.useCallback(function() {
    if (actionDelay) {
      window.setTimeout(function() {
        onActionTriggered(destructive);
        onClick();
      }, actionDelay);
      return;
    }
    onActionTriggered(destructive);
    if (destructive) {
      window.setTimeout(function() {
        return onClick();
      }, destructiveCallbackDelay);
    } else {
      onClick();
    }
  }, [actionDelay, destructive, destructiveCallbackDelay, onActionTriggered, onClick]);
  import_react.default.useEffect(function() {
    if (leading && main) {
      setLeadingFullSwipeAction(onHandleClick);
    }
  }, [leading, main, onHandleClick, setLeadingFullSwipeAction]);
  import_react.default.useEffect(function() {
    if (trailing && main) {
      setTrailingFullSwipeAction(onHandleClick);
    }
  }, [trailing, main, onHandleClick, setTrailingFullSwipeAction]);
  return import_react.default.createElement(Tag, {
    className: clsx("swipe-action", {
      "swipe-action__leading": leading,
      "swipe-action__trailing": trailing,
      "swipe-action__leading--full-swipe-rest": leading && leadingFullSwipe && !main && listType === Type.IOS,
      "swipe-action__leading--full-swipe-main": leading && leadingFullSwipe && main && listType === Type.IOS,
      "swipe-action__trailing--full-swipe-rest": trailing && trailingFullSwipe && !main && listType === Type.IOS,
      "swipe-action__trailing--full-swipe-main": trailing && trailingFullSwipe && main && listType === Type.IOS,
      "swipe-action__grayed": listType === Type.MS && !(scaleLeading || scaleTrailing)
    }, className),
    onClick: onHandleClick
  }, children);
};
SwipeAction.propTypes = {
  children: import_prop_types.default.node.isRequired,
  className: import_prop_types.default.string,
  destructive: import_prop_types.default.bool,
  main: import_prop_types.default.bool,
  leading: import_prop_types.default.bool,
  onClick: import_prop_types.default.func.isRequired,
  trailing: import_prop_types.default.bool,
  Tag: import_prop_types.default.string
};
var TrailingActions = function TrailingActions2(_ref) {
  var children = _ref.children;
  if (children === null || children === void 0) {
    return null;
  }
  if (Array.isArray(children)) {
    return import_react.default.Children.map(children, function(child, index) {
      if (!import_react.default.isValidElement(child)) {
        return child;
      }
      return import_react.default.cloneElement(child, {
        main: index === children.length - 1,
        trailing: true
      });
    });
  }
  return import_react.default.cloneElement(children, {
    main: true,
    trailing: true
  });
};
export {
  LeadingActions,
  SwipeAction,
  SwipeableList,
  SwipeableListItem,
  TrailingActions,
  Type
};
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=react-swipeable-list.js.map
